<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&amp;lt; front-end-folks /&amp;gt;</title>
    <description>A Material Design and jekyll inspired Blog</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jan 2016 22:26:57 +0530</pubDate>
    <lastBuildDate>Mon, 04 Jan 2016 22:26:57 +0530</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Design Principles Of A Product</title>
        <author>Adhikari Srinivasa Kumar</author>
        <description>&lt;p&gt;A company proves that it has a strong creative process by developing successful products repeatedly. We see this in companies like Apple, BMW and Google. Founders such as Steve Jobs formed a corporate culture with an intense focus on creativity and design. 
This culture highlights two core elements in the creative process: the ideas and the team.&lt;/p&gt;

&lt;h5 id=&quot;six-core-product-design-principles&quot;&gt;six core product design principles&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;irreducible simplicity&lt;/li&gt;
  &lt;li&gt;immediate intuition&lt;/li&gt;
  &lt;li&gt;beauty underneath&lt;/li&gt;
  &lt;li&gt;approachable innovation&lt;/li&gt;
  &lt;li&gt;form and color agreement&lt;/li&gt;
  &lt;li&gt;replicable methodology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make decisions, we can use these principles as a test by rating a product on a scale from 1 to 10 for each of the principles above. The lowest rating is a 1, and the highest is a 10. Each explanation below comes with examples to give you an idea of how to rate your product. Keep in mind that creative analysis is, ultimately, subjective and personal (like appreciating wine or a painting); therefore, each person’s rankings will be different.&lt;/p&gt;

&lt;p&gt;But keep in mind that the purpose of this “test” is to facilitate a thought process that leads to the best product iterations possible. Let’s begin.&lt;/p&gt;

&lt;h5 id=&quot;irreducible-simplicity&quot;&gt;Irreducible Simplicity&lt;/h5&gt;

&lt;p&gt;You’ve created a product to meet a need. (If this isn’t true, then stop reading this and first build something helpful.) Now ask yourself, “Does my product have extraneous features that diminish the experience and satisfaction it provides?”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Deciding what not to do is as important as deciding what to do.” - Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a car. A car is created, in its most basic form, to get you from point A to point B. The audio system doesn’t help you get from point A to point B, right? Therefore, should the audio system be removed for the sake of simplicity? No. The audio system is left in because it makes the experience of getting from point A to point B more satisfying. 
The goal of any product design is to reduce everything until you reach the point that satisfaction is not sacrificed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, look at your product and apply the principle of irreducible simplicity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What single problem does it solve clearly and thoroughly?&lt;/li&gt;
  &lt;li&gt;Does each feature solve a single problem clearly and thoroughly?&lt;/li&gt;
  &lt;li&gt;What features can be taken away without sacrificing satisfaction?&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;immediate-intuition&quot;&gt;Immediate Intuition&lt;/h5&gt;

&lt;p&gt;You’ve read about the central tension between Android and iPhone: an open system versus a closed one. Google allows its users to tinker extensively, allowing full customization of its software, whereas Apple controls the user’s experience by setting up parameters and standards that limit the iPhone’s flexibility.
(For example, an iPhone app cannot be programmed to close another app.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Any product that needs a manual to work is broken.” - Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While both mobile providers would argue that their approach is best, they have both created products that make different statements about the principle of immediate intuition. Google is essentially saying, “We’ve made a product that could be more intuitive — and we want you to help us figure it out. Enjoy!” Apple is claiming, “We’ve made a product for which there is no rational alternative. Enjoy!”&lt;/p&gt;

&lt;p&gt;The market share split between Android and iPhone suggests Android is more popular (78% to Apple’s 17.8%), but Apple’s 92% profit share in the smartphone industry suggests a stronger product that people are willing to pay more for. This tension highlights that what is intuitive to me might not be intuitive to you. So, remember that, when designing for intuition, empathize with your target customer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analyze your own product against the principle of immediate intuition using the following questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How does using it reduce stress?&lt;/li&gt;
  &lt;li&gt;How long would it take someone to fully understand it?&lt;/li&gt;
  &lt;li&gt;In what ways can it be improved?&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;beauty-underneath&quot;&gt;Beauty Underneath&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;“[Be] fanatical in terms of care and attention to things people don’t see immediately. It’s like finishing the back of a drawer. &amp;gt; &amp;gt; Nobody’s going to see it, but you do it anyway. Products are a form of communication — they demonstrate your value system, what you &amp;gt; care about.” - Jonathan Ive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s say you put your dating hat on (or back on) and take an attractive and interested person out to dinner, sharing wine and having a great time. As the night goes on, it dawns on you that this person has an incredible story, a humble self-regard and a genuine heart for others. You stop seeing their physical attractiveness and are now passionately curious to really get to know this person.
Hence, a second date. In the same way, when the user of a product unexpectedly discovers beauty underneath (the hidden value), they will want to continue using the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Smart Table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My laptop’s battery died once in Meeting, as I was sitting at a large dark table made of reclaimed wood. I looked forlornly at the wall, where the power sockets were, and dreaded running my charger awkwardly across the laps of the other people sitting at the table. I rustled in my bag for the charger and began apologizing for getting in the way of others, dragging my charger to the wall and bending down to plug in. I sat back down. That’s when the person across from me said, “You know there is a power socket in the table, right? It’s, like, right there.” He pointed right in front of me.
I looked underneath the table, and just four inches from my face were two power sockets. Oh. Beauty underneath.&lt;/p&gt;

&lt;p&gt;I would rate this table  9 out of 10 for beauty underneath because of its tasteful, unobtrusive appearance and its surprisingly useful technological undergirding. Soon, we will see Powermat Spots built right into the tables, allowing customers to wirelessly charge compatible mobile devices simply by placing them on the table — no plugging or cords involved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To assess your product against the principle of beauty underneath, ask yourself:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does my product have usefulness that is not immediately apparent?&lt;/li&gt;
  &lt;li&gt;Is a hidden gem of value lying below the surface of my product?&lt;/li&gt;
  &lt;li&gt;Does my product have a lagniappe?&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;approachable-innovation&quot;&gt;Approachable Innovation&lt;/h5&gt;

&lt;p&gt;Loudcloud introduced cloud computing five or six years too early; people didn’t get it. The Palm Pilot was a breakthrough in the market for personal digital assistants, but Palm didn’t innovate enough to keep up. Instagram, on the other hand, beautifully reduced the clutter in the social photo-viewing experience.&lt;/p&gt;

&lt;p&gt;These are stories that demonstrate that, for an innovation to be successful, it must be approachably innovative. Loudcloud’s product was too revolutionary, and it scared or confused people. The Palm Pilot became mundane, which bored or annoyed people. Instagram was approachable — falling right in the middle of the boring-scary scale.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/innovation.jpg&quot; alt=&quot;innovation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assess your product against the principle of approachable innovation by asking these questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is different about your product from others like it?&lt;/li&gt;
  &lt;li&gt;When you tell others about it, do they understand it right away?&lt;/li&gt;
  &lt;li&gt;Will customers be familiar with at least some elements of your product?&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;form-and-color-agreement&quot;&gt;Form And Color Agreement&lt;/h5&gt;

&lt;p&gt;It is absolutely critical that form and color agree with a product’s purpose. All products — whether books, cups, apps, clothes — have a form and color for a specific purpose. For example, throughout the iPhone generations, the most visible changes have been in form and color — larger sizes, new colors, rounded edges. The iPhone 6 was very deliberately released with only three colors: gold, silver and space gray.&lt;/p&gt;

&lt;p&gt;Why these colors? Because they express the purpose of the product. If the hue of the gold or silver was a smidge deeper, the color would have said, “flash and glitz,” instead of “intelligence and power.” If you removed the “space” from “space gray,” the color would have said “dull” instead of “imaginative.” A helpful product can be ruined by misaligned form and color. Getting it right is important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a product designer, have you chosen the best form and colors for your product? Ask yourself these questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have you researched the emotions behind the colors you’ve chosen?&lt;/li&gt;
  &lt;li&gt;What do the curves, lines, angles, dimensions and textures say about the product?&lt;/li&gt;
  &lt;li&gt;Do the color and form agree with your product’s purpose?&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;repeatable-methodology&quot;&gt;Repeatable Methodology&lt;/h5&gt;

&lt;p&gt;Apple discovered that what is critical is not necessarily the product itself, but rather the methodology by which the idea behind it comes to life. In other words, anyone can get lucky and make a good product; but a methodology can produce generations of great products.&lt;/p&gt;

&lt;p&gt;The Wall Street Journal published an article, “After the One-Hit Wonder,” telling the stories of four products that followed a similar pattern. One person gets an idea, executes, experiences rapid growth and makes millions in sales. Then, sales drop off, and the person launches another product, which performs moderately or not well at all.&lt;/p&gt;

&lt;p&gt;This happens because one-hit wonders come not from a methodology, but from a one-off idea of one person.&lt;/p&gt;

&lt;p&gt;A creative process seeks to remove the “chance” and “luck” behind a great product and replace it with a methodology for delivering value and design consistently over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analyze how repeatable your methodology is with these questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Did the idea come from one person or from a team of people?&lt;/li&gt;
  &lt;li&gt;Will the product continue to satisfy a need in three to five years from now?&lt;/li&gt;
  &lt;li&gt;Is the product multi-generational?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now it’s your turn. If you have read this far, then you know about the six design principles inspired by the world’s greatest product designers and how they apply to the 5 products I’ve looked at. To try this out yourself, pick a product — perhaps yours, perhaps a random one, perhaps a website or mobile app — and run it through the six steps of the product design.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 +0530</pubDate>
        <link>/Design-principles-of-a-product/</link>
        <guid isPermaLink="true">/Design-principles-of-a-product/</guid>
        
        
      </item>
    
      <item>
        <title>Why Passphrases Are More User-Friendly Than Passwords</title>
        <author>Adhikari Srinivasa Kumar</author>
        <description>&lt;p&gt;A user’s account on a website is like a house. The password is the key, and logging in is like walking through the front door. When a user can’t remember their password, it’s like losing their keys. When a user’s account is hacked, it’s like their house is getting broken into.&lt;/p&gt;

&lt;p&gt;Nearly half of Americans (47%) have had their account hacked in the last year alone. Are web designers and developers taking enough measures to prevent these problems? Or do we need to rethink passwords?&lt;/p&gt;

&lt;h5 id=&quot;compromising-security&quot;&gt;COMPROMISING SECURITY&lt;/h5&gt;

&lt;p&gt;On most websites, you need to create an account to do more than browse. Users will create many passwords in their lifetime. But remembering them all is no easy task. They could use the same password for every account, but that makes them more vulnerable to attack if one gets compromised. They could use passwords that are easy to remember, but an easy password is an easy target for brute-force hacking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/usability.jpg&quot; alt=&quot;usability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They could jot down or store all of their passwords in case they forget, but if someone gets ahold of that paper or file, then all of their accounts will be compromised. As well, it’s easy to misplace papers and files and inconvenient to pull them out every time you want to log in somewhere.&lt;/p&gt;

&lt;p&gt;No matter what they do, when users create a password with usability in mind, they often end up compromising security.&lt;/p&gt;

&lt;h5 id=&quot;compromising-usability&quot;&gt;COMPROMISING USABILITY&lt;/h5&gt;

&lt;p&gt;To keep their accounts secure, users could create passwords that meet the maximum requirements of a “strong” password. Such a password would include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;numbers,&lt;/li&gt;
  &lt;li&gt;lowercase letters,&lt;/li&gt;
  &lt;li&gt;capital letters,&lt;/li&gt;
  &lt;li&gt;punctuation symbols,&lt;/li&gt;
  &lt;li&gt;and a certain number of characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it should not include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a dictionary word,&lt;/li&gt;
  &lt;li&gt;a common password,&lt;/li&gt;
  &lt;li&gt;or words found in your name, username or company name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/security.png&quot; alt=&quot;security&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming up with a password that meets these requirements would take most users a long time. You risk losing registrations if they take longer than expected. When a user finally comes up with a password, it’s often so random that it’s almost impossible to remember. This increases the chance that the user will forget and be unable to log in. Also frustrating is when a user is locked out of their account after trying too many passwords.&lt;/p&gt;

&lt;p&gt;Typing passwords isn’t easy either, much less remembering them. Users are prone to error when they have to hold the Shift key to type capital letters or symbols. A password that’s secure but not usable won’t do users any good.&lt;/p&gt;

&lt;h5 id=&quot;passphrases-a-change-for-the-better&quot;&gt;Passphrases: A Change For The Better&lt;/h5&gt;

&lt;p&gt;Balancing security and usability is a must, but passwords today don’t cut it. Websites need to change for the better and need to upgrade from passwords to passphrases.
Passwords and passphrases serve the same purpose. But passwords are generally short, hard to remember and easier to crack. Passphrases are easier to remember and to type, and they’re considered more secure due to their length and because you don’t need to write them down.&lt;/p&gt;

&lt;h5 id=&quot;why-passphrases-are-more-secure&quot;&gt;Why Passphrases Are More Secure&lt;/h5&gt;

&lt;p&gt;LONGER REQUIREMENT STOPS BRUTE-FORCE ATTACKS&lt;/p&gt;

&lt;p&gt;Most passwords have a minimum requirement of 8 characters. But most passphrases have a minimum requirement of 16 characters. This greater length provides more security because it takes far longer to crack.&lt;/p&gt;

&lt;p&gt;Increasing character length increases the total number of possible correct passwords. The longer a password is, the longer a brute-force program will take to guess the right one. Let’s put this to the test by comparing a complex password with a simple passphrase using a sophisticated password checker.&lt;/p&gt;

&lt;p&gt;The complex password will not have any dictionary words and will contain numbers, capital letters and symbols, making it as strong as can be. The simple passphrase will contain dictionary words and only lowercase letters, making it as weak as can be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/brute-force-attack.png&quot; alt=&quot;brute-force&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When comparing the two, we can see that the simple weak passphrase is impossible to brute-force hack. But the strong, complex password would take less than two years to hack. You would expect the password to take longer than that because of its high character complexity. That goes to show that character length is what protects users from brute-force attacks, not character complexity.&lt;/p&gt;

&lt;h5 id=&quot;multiple-words-stop-dictionary-attacks&quot;&gt;MULTIPLE WORDS STOP DICTIONARY ATTACKS&lt;/h5&gt;

&lt;p&gt;Brute force isn’t the only way to hack a password. Hackers can also use dictionary attacks. But a passphrase will protect users against dictionary attacks more than a password. Although using a password that contains only dictionary words is not recommended, it is still common and can get hacked easily. But if users were to use only dictionary words in a passphrase, they would stay safe from this type of attack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/dictionary-attack.png&quot; alt=&quot;dictionary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most dictionary passwords contain one or two words. A dictionary attack is more likely to succeed here because of the limited number of words in the dictionary. Even an uncommon dictionary word wouldn’t stop a dictionary attack. A dictionary passphrase would contain at least five words. The virtually infinite number of word combinations makes it impossible for a dictionary attack to succeed.&lt;/p&gt;

&lt;h5 id=&quot;multiple-parts-of-speech-make-it-harder-to-guess&quot;&gt;MULTIPLE PARTS OF SPEECH MAKE IT HARDER TO GUESS&lt;/h5&gt;

&lt;p&gt;Passwords that are easy to guess often contain a single piece of personal information: the user’s name, birthdate or pet, their favorite color, food or place, etc. All of these nouns easily meet the character-length requirement for a password.&lt;/p&gt;

&lt;p&gt;The longer character-length requirement of a passphrase prevents users from using personal information. A single noun isn’t enough to meet the requirement. This forces users to add other parts of speech to their passphrase, making it harder to guess.&lt;/p&gt;

&lt;h5 id=&quot;why-passphrases-are-more-usable&quot;&gt;Why Passphrases Are More Usable&lt;/h5&gt;

&lt;p&gt;PHRASES ARE EASIER TO REMEMBER THAN RANDOM CHARACTERS&lt;/p&gt;

&lt;p&gt;It’s easier to recall a phrase than random characters. Phrases are meaningful and relatable. This is why users are able to remember a passphrase more than a password. When users create a password, they have to meet the form’s password policy. Many forms do not allow dictionary words to keep users safe from dictionary attacks. Users have no choice but to add randomness to their password.&lt;/p&gt;

&lt;p&gt;But a random non-dictionary word is the hardest for users to remember. Many will opt to use a word and add random characters within it. But that’s still hard to remember because the random characters could go in many places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/using-phrases.png&quot; alt=&quot;brute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding complexity to a passphrase is easier because you can add elements between words. This makes the randomness easier to remember because there are fewer places between words. A passphrase doesn’t need the high level of randomness of passwords. A little complexity goes a long way because of the security that a passphrase brings. Some people use the first letter of each word in a sentence as their password. This is much more memorable but still not as secure as a passphrase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/character-length.png&quot; alt=&quot;brute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, the sentence “I lived in Germany for two years” could be turned into “iliGf2yrs.” Even with a capital letter, a number and random letters, it’s still vulnerable to brute-force hacking. The same sentence spelled out as the passphrase “ilivedinGermanyfor2yrs” would be unhackable. The difference in character length has a huge impact on security.&lt;/p&gt;

&lt;h5 id=&quot;words-are-allowed&quot;&gt;WORDS ARE ALLOWED&lt;/h5&gt;

&lt;p&gt;Finding a password that doesn’t include a dictionary word is the toughest password requirement for users to meet. Carnegie Mellon’s research data show that “creating a password is significantly more difficult under stricter password policies, particularly those involving dictionary checks.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/using-words.png&quot; alt=&quot;brute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming up with a random non-dictionary word is hard to do and hard to remember. Passphrases don’t need strict dictionary checks. Words are allowed as long as they meet the passphrase’s length requirement. The compromise of usability for security in password policies is too wide a gap to ignore. Passphrase policies balance both, minimizing registration abandonment or user frustration.&lt;/p&gt;

&lt;h5 id=&quot;passphrase-policies-are-less-strict-in-registration-forms&quot;&gt;PASSPHRASE POLICIES ARE LESS STRICT IN REGISTRATION FORMS&lt;/h5&gt;

&lt;p&gt;Users often get stuck on registration pages when they can’t create a password that meets the website’s policy. This happens because password policies have too many requirements, creating frustration in users and leading them to abandon forms.&lt;/p&gt;

&lt;p&gt;Password Policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has at least 8 characters&lt;/li&gt;
  &lt;li&gt;includes capital and lowercase letters&lt;/li&gt;
  &lt;li&gt;includes one or more digits&lt;/li&gt;
  &lt;li&gt;includes one or more symbols (@, #, $, etc.)&lt;/li&gt;
  &lt;li&gt;prohibits words found in dictionary&lt;/li&gt;
  &lt;li&gt;prohibits user’s personal information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passphrase Policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has at least 16 characters&lt;/li&gt;
  &lt;li&gt;includes a capital letter or number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passphrase policies don’t need to be as strict to give users security. The only requirement a passphrase needs is to be 16 character or longer. The researchers found that “a 16-character minimum with no additional requirements provides the most entropy while proving more usable on many measures than the strongest alternative.” This helps users to create accounts more easily while maintaining security.&lt;/p&gt;

&lt;p&gt;Password policies vary between websites. This forces users to create a different password to meet each website’s requirements. Users end up with a long list of different passwords to manage. Passphrase policies wouldn’t vary between websites, though. All that is needed for maximum security is a length of 16 or more characters and a capital letter or number.&lt;/p&gt;

&lt;h5 id=&quot;what-websites-should-do&quot;&gt;What Websites Should Do&lt;/h5&gt;

&lt;p&gt;REPLACE “WORD” WITH “PHRASE”&lt;/p&gt;

&lt;p&gt;The first step is to take the “word” out of password. The term “password” gives users the impression that the website expects them to use a word. But a word isn’t secure under any circumstances.&lt;/p&gt;

&lt;p&gt;Change the user’s understanding by using the term “passphrase” instead. This tells them that you expect a phrase, not a word. By making this expectation clearer, users will know that a phrase is more secure than a word.&lt;/p&gt;

&lt;h5 id=&quot;make-the-policy-clear&quot;&gt;MAKE THE POLICY CLEAR&lt;/h5&gt;

&lt;p&gt;Most users are accustomed to seeing password policies. Let them know that a passphrase policy is different by displaying the requirements upon registration. Pop up a tooltip over the passphrase text field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../_assets/images/passphrase-validation.png&quot; alt=&quot;passphrase-validation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t make users have to count 16 characters when creating a passphrase. Do it for them by designing a tooltip to validate their input. When the user meets the requirement, a green checkmark should appear next to the field.&lt;/p&gt;

&lt;p&gt;The good news is that switching to passphrases doesn’t require a technical overhaul. It’s as simple as introducing the concept to users and requiring a higher character length.&lt;/p&gt;

&lt;p&gt;The state of passwords today causes more headache than happiness. Passphrases are a better alternative because they are more secure and usable. A few websites out there enforce passphrases. More should follow suit in order to decrease account breaches and user frustration. No user should feel like they’ve lost their keys or had their house broken into.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 00:00:00 +0530</pubDate>
        <link>/passphrases/</link>
        <guid isPermaLink="true">/passphrases/</guid>
        
        <category>sample post</category>
        
        
      </item>
    
      <item>
        <title>Angular Vs Polymer</title>
        <author>Adhikari Srinivasa Kumar</author>
        <description>&lt;p&gt;A year after pulling back the curtains on the Polymer Project, Google’s taken part of I/O 2014 to demo what the code can do. Right on cue, the web is abuzz with discussion comparing Polymer to other popular web frameworks, and it’s no surprise since it bears some resemblance to Google’s very own AngularJS. Join me after the break as I introduce Polymer and explore just how it relates to Angular.&lt;/p&gt;

&lt;h5 id=&quot;what-is-polymer&quot;&gt;What is Polymer?&lt;/h5&gt;

&lt;p&gt;Polymer is a library for creating Web Components, which are a set of W3C standards and upcoming browser APIs for defining your own custom HTML elements. With the help of polyfills and sugar, it can create these custom elements and bring Web Component support to browsers that don’t play nice with the standard just yet.&lt;/p&gt;

&lt;p&gt;Custom elements? Huh? They look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;google-map&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.790&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-122&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.390&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;google-map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Seem familiar? They’re are very similar to Angular directives. As you’d expect, the result would be a Google Map plugged directly into your webpage.&lt;/p&gt;

&lt;h5 id=&quot;so-how-does-polymer-differ-from-angular&quot;&gt;So, how does Polymer differ from Angular?&lt;/h5&gt;

&lt;p&gt;Angular is a complete framework for building webapps, whereas Polymer is a library for creating Web Components. Those components, however, can then be used to build a webapp.&lt;/p&gt;

&lt;p&gt;Angular has high-level APIs for things like services, routing, server communication and the like. Polymer, on the other hand, doesn’t provide these things except as separate web components from their core library. Instead, it focuses on allowing you to create rich, powerful, reusable web components, which could be used to build webapps like those built with Angular. In the future, the lines could be blurred further as frameworks like Angular may leverage Web Components.&lt;/p&gt;

&lt;p&gt;Even though Angular and Polymer aim to do different things, there is currently some overlap. Web components and Angular’s element directives are very similar, and if there’s a comparison to be made it should be between Polymer’s Custom Elements and Angular’s directives.&lt;/p&gt;

&lt;h5 id=&quot;angular-directives-vs-custom-elements&quot;&gt;Angular directives vs. Custom Elements&lt;/h5&gt;

&lt;p&gt;Polymer (more specifically Shadow DOM) provides the ability to compose encapsulated JS, CSS, and HTML as Custom Elements, much like Angular element directives.&lt;/p&gt;

&lt;p&gt;Angular directives are conceptually similar to Custom Elements but they are implemented without the use of the Web Components APIs. Angular directives are a way to build custom elements, but Polymer and the Web Components specification are the standards-based way to do it.&lt;/p&gt;

&lt;p&gt;Similar to Angular, Polymer elements provide templating and bi-directional data binding. However, they also provide new functionality such as the Shadow DOM, which enables encapsulation of CSS. Angular directives don’t have any notion of style encapsulation, but Angular is expected incorporate that functionality eventually.&lt;/p&gt;

&lt;p&gt;In the future, both will be used together. Because custom elements will be the DOM, they’ll work seamlessly with frameworks like Angular. The Angular team has said they will eventually use the underlying Web Components APIs (Custom Elements, Shadow DOM, etc.).&lt;/p&gt;

&lt;p&gt;Polymer Custom Element:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;polymer-element&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;user-gravatar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.gravatar.com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;user-gravatar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;py&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;polymer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Angular directive:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.directive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;user-gravatar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&#39;E&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;gravatar&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, Polymer uses a declarative syntax (another element!) to create custom elements. Both accomplish the same thing but using different approaches.&lt;/p&gt;

&lt;h5 id=&quot;can-angular-and-polymer-be-used-together&quot;&gt;Can Angular and Polymer be used together?&lt;/h5&gt;

&lt;p&gt;Yes! You can use Polymer custom elements inside of an Angular app. Web components are just regular DOM elements, so they have attributes, emit events, and can contain child elements.&lt;/p&gt;

&lt;h5 id=&quot;what-about-the-future-of-both-projects&quot;&gt;What about the future of both projects?&lt;/h5&gt;

&lt;p&gt;Angular and Polymer will remain separate projects with their own goals. That said, Angular has announced they’ll eventually move to use the Web Components APIs in their underlying architecture.&lt;/p&gt;

&lt;p&gt;For Angular 2.0, Web Components will work seamlessly within Angular apps and directives, and components written in Angular will export to Web Components to be used by Polymer or other libraries.&lt;/p&gt;

&lt;p&gt;As the Web Components specification matures and browsers implement the various APIs, Polymer elements will utilize native browser functionality instead of
polyfills. Eventually, once browser support has improved, Polymer’s polyfill layer can be gracefully removed.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 00:00:00 +0530</pubDate>
        <link>/Angular-Vs-Polymer/</link>
        <guid isPermaLink="true">/Angular-Vs-Polymer/</guid>
        
        
      </item>
    
  </channel>
</rss>
